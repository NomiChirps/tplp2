build --verbose_failures
build --cxxopt=-std=c++17

# Enable new-style C++ toolchain resolution and set the target platform
# These could be "common" options, but 'bazel dump' (among others) doesn't recognize them; see https://github.com/bazelbuild/bazel/issues/3054
build --incompatible_enable_cc_toolchain_resolution
build --platforms=@rules_pico//platforms:pico
build:simulate --platforms=
# Target platform when running tools is the host or exec platform (referred to by the empty string)
run --platforms=
test --platforms=

# For a debug build, optimize everything except code in this workspace.
# We can't build with just "-c dbg" because there's not enough flash on the board to store ALL the debug symbols.
# Select this with "--config=debug".
build:debug -c opt --per_file_copt=//.*\.cc@-O1,-g
build:debug --@rules_pico//pico/config:stdio_usb=False

# For regular old development without a debugger.
# Still "-c opt" to keep the image size to a reasonable level.
build:iterate -c opt
build:iterate --copt="-DPICOLOG_RESET_TO_BOOTLOADER_ON_FATAL=1"

# TODO: add a freertos config for the simulator
build --@FreeRTOS//:FreeRTOSConfig=//tplp:FreeRTOSConfig

## Configuration of various libraries
build --copt="-DPICOLOG_VMODULE=\"SpiManager=0,HX8357=1\""

# TODO: can we put these defines in a header somewhere?
# Wait for someone to monitor serial output
build --copt="-DPICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS=5000"
build --copt="-DPICO_STDIO_USB_POST_CONNECT_WAIT_DELAY_MS=200"

# We don't use pico-sdk sleep functions, and would like to
# disable the default alarm pool they use. But @rules_pico
# explicitly enables it. Why?
# See https://github.com/raspberrypi/pico-sdk/issues/873
#common --copt="-DPICO_TIME_DEFAULT_ALARM_POOL_DISABLED=1"

# Disable CR/LF conversion on stdout. This is useless overhead.
build --copt="-DPICO_STDIO_ENABLE_CRLF_SUPPORT=0"

# Flags needed for //picolog:backtrace
build:debug --copt="-mpoke-function-name"
build:iterate --copt="-mpoke-function-name"
# No -mpoke-function-name for the simulate config because it's
# an ARM-only feature.

# Not clear if we also need the following for backtrace. Are they implied? Already set?
# Backtrace seems to work fine without them for now.
#     -fno-omit-frame-pointer -funwind-tables
