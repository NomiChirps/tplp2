#
# Configs of interest:
#
#   --config=
#       Default config is fastbuild targeting the Pico.
#   --config=iterate
#       For a quick compile / flash / manually-test cycle.
#   --config=picodebug
#       For running under pico-debug.
#   --config=simulate
#       Targets POSIX instead of Pico.
#

# Show full compiler/etc command line when the build fails.
build --verbose_failures --test_output=errors
# Set the C++ standard we're using.
build --cxxopt=-std=c++17

# Use "build:test" instead of "test" in this file, so we can build tests without running them for refresh_compile_commands.
test --config=test

# A new Bazel feature required by the FreeRTOS build
build --experimental_cc_implementation_deps

# Enable new-style C++ toolchain resolution and set the target platform for pico-sdk.
# These could be "common" options, but 'bazel dump' (among others) doesn't recognize them; see https://github.com/bazelbuild/bazel/issues/3054
build --incompatible_enable_cc_toolchain_resolution
build --platforms=@rules_pico//platforms:pico
build:simulate --platforms=
# Target platform when running tools is the host or exec platform (referred to by the empty string)
run --platforms=
build:test --platforms=

# For a debug build, optimize everything except code in this workspace.
# We can't build with just "-c dbg" because there's not enough flash on the board to store ALL the debug symbols.
# Select this with "--config=picodebug".
build:picodebug -c opt --per_file_copt=//.*\.cc@-O1,-g
# For regular old development without a debugger, optimize everything to keep the image small.
build:iterate -c opt

# picolog config
# Verbosity
build --copt="-DPICOLOG_VMODULE=\"sdspi=1,dma=0\""
# Compile out logs below a certain severity
#--copt="-DPICOLOG_STRIP_LOG=0"

# pico-sdk config
build --@rules_pico//pico/config:board=pico
build --@rules_pico//pico/config:float_impl=@pico-sdk//:pico_float_none
build --@rules_pico//pico/config:double_impl=@pico-sdk//:pico_double_none
build --@rules_pico//pico/config:rtos_adapter_enable=True
build --@rules_pico//pico/config:rtos_adapter_header=@FreeRTOS//ports/GCC_RP2040:freertos_sdk_config
build --@rules_pico//pico/config:rtos_adapter_header_name=FreeRTOS/freertos_sdk_config.h
build --@rules_pico//pico/config:stdio_semihosting=False
build --@rules_pico//pico/config:stdio_uart=True
build --@rules_pico//pico/config:stdio_usb=False
# TODO: can we put these defines in a header somewhere?
# Disable CR/LF conversion on stdout. This is useless overhead.
build --copt="-DPICO_STDIO_ENABLE_CRLF_SUPPORT=0"
#build --copt="-DPICO_DEBUG_MALLOC=1"

# lvgl config
build --@lvgl//:lv_conf=//tplp/config:lv_conf
build:simulate --@lvgl//:lv_conf=//simulator/config:lv_conf
build:simulate --@lvgl//:lv_drv_conf=//simulator/config:lv_drv_conf

# FreeRTOS config
build --@FreeRTOS//config:FreeRTOSConfig=//tplp/config:FreeRTOSConfig
build --@FreeRTOS//config:port=GCC_RP2040
build:simulate --@FreeRTOS//config:FreeRTOSConfig=//simulator/config:FreeRTOSConfig
build:simulate --@FreeRTOS//config:port=GCC_POSIX
build:test --@FreeRTOS//config:FreeRTOSConfig=//testing:FreeRTOSConfig
build:test --@FreeRTOS//config:port=GCC_POSIX

# Flags needed for //picolog:backtrace
build:picodebug --copt="-mpoke-function-name"
build:iterate --copt="-mpoke-function-name"
# No -mpoke-function-name for the simulate config because it's
# an ARM-only feature.

# Not clear if we also need the following for backtrace. Are they implied? Already set?
# Backtrace seems to work fine without them for now.
#     -fno-omit-frame-pointer -funwind-tables
