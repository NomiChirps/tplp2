; PWM controller for a bipolar stepper motor.
;
; FJOIN_TX = 1
; OUT_SHIFTDIR = 1
; AUTOPULL = 1
; PULL_THRESH = 0 (meaning a value of 32)
;
; The PWM counter loop is 4 cycles long, so the PIO clock frequency
; should be equal to pwm_freq_hz*4.
;
; First, write the 32-bit PWM period to the TX FIFO.
; On subsequent writes, the low 16 bits are the PWM
; target value and the high 16 bits are a JMP instruction
; pointing to one of the phase1, phase3, etc labels.
; 
; side-set pins are [A1, A2, B1, B2].
.program stepper
.side_set 4 opt

start:
    ; Save PWM period to the ISR.
    ; It will never be cleared because we never `push`.
    ; Also set initial motor state (off).
    out isr, 32             side 0b1111

public new_command:
    ; Execute a new command, blocking until it's available.
    ; Read PWM target into X, then jump to one of the phase labels.
    out x, 16
    out exec, 16

    ; # phase A1  A2  phase B1  B2
    ; 0   0   255 255   +   255 0
    ; 1   ^   255 dn    v   255 up
    ; 2   +   255 0     0   255 255
    ; 3   v   255 up    v   dn  255
    ; 4   0   255 255   -   0   255
    ; 5   v   dn  255   ^   up  255
    ; 6   -   0   255   0   255 255
    ; 7   ^   up  255   ^   255 dn
    ;     wrap around   wrap around

    ; Pseudocode for each odd phase's PWM output:
    ;
    ;   output = 0;
    ;   for (x = pwm_target, y = pwm_period; y-- != 0;) {
    ;     if (x==y) output = 1;
    ;   }
    ;
    
    ; Even phases are a single side-set and get executed
    ; from new_command directly. For example,
    ;   jmp new_command         side 0b0111

public phase1:
    ; # phase A1  A2  phase B1  B2
    ; 1   ^   255 dn    v   255 up
    mov y, isr              side 0b0111
phase1_pwm_countdown:
    jmp x!=y phase1_noset
    jmp phase1_skip         side 0b1101
phase1_noset:
    nop
phase1_skip:
    jmp y-- phase1_pwm_countdown
    jmp !osre new_command
    jmp phase1

public phase3:
    ; # phase A1  A2  phase B1  B2
    ; 3   v   255 up    v   dn  255
    mov y, isr              side 0b1101
phase3_pwm_countdown:
    jmp x!=y phase3_noset
    jmp phase3_skip         side 0b1011
phase3_noset:
    nop
phase3_skip:
    jmp y-- phase3_pwm_countdown
    jmp !osre new_command
    jmp phase3

public phase5:
    ; # phase A1  A2  phase B1  B2
    ; 5   v   dn  255   ^   up  255
    mov y, isr              side 0b1011
phase5_pwm_countdown:
    jmp x!=y phase5_noset
    jmp phase5_skip         side 0b1110
phase5_noset:
    nop
phase5_skip:
    jmp y-- phase5_pwm_countdown
    jmp !osre new_command
    jmp phase5

public phase7:
    ; # phase A1  A2  phase B1  B2
    ; 7   ^   up  255   ^   255 dn
    mov y, isr              side 0b1110
phase7_pwm_countdown:
    jmp x!=y phase7_noset
    jmp phase7_skip         side 0b0111
phase7_noset:
    nop
phase7_skip:
    jmp y-- phase7_pwm_countdown
    jmp !osre new_command
    jmp phase7
