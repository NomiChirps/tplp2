; PWM controller for a bipolar stepper motor.
;
; FJOIN_TX = 1
; OUT_SHIFTDIR = 1
; AUTOPULL = 0
;
; Both "SET" pins and "OUT" pins should be set to the 4 motor control pins.
;
; Command format:
;   pwm_period, t1, t2_t3, pins_t2_t3, pins_t4
;
; Be sure to put an initial command in the FIFO before starting the SM.
;
.program stepper
; TODO: figure out how i wanna tune this
.define public loop_delay 7
.define public instructions_per_count (loop_delay+2)

; # phase A1  A2  phase B1  B2
; 0   0   255 255   +   255 0
; 1   ^   255 dn    v   255 up
; 2   +   255 0     0   255 255
; 3   v   255 up    v   dn  255
; 4   0   255 255   -   0   255
; 5   v   dn  255   ^   up  255
; 6   -   0   255   0   255 255
; 7   ^   up  255   ^   255 dn
;     wrap around   wrap around

.wrap_target
    ; NB: "A MOV to the OSR may overwrite data which has just been autopulled"
    pull noblock
    ; save command in ISR so we can use x
    mov isr, osr
    out y, 8            ; y := pwm_period
    out x, 8            ; x := t1
    jmp x!=y t1
    jmp t1_break
t1:
    set pins, 0b1111    ; pins := pins_t1 (fixed)
t1_loop:
    jmp x!=y t1_continue
    jmp t1_break
t1_continue:
    jmp y--, t1_loop     [loop_delay]
t1_break:
    out x, 8            ; x := t2_t3
    jmp x!=y t2_t3
    out null, 4         ; discard pins_t2_t3 if t2_t3 duration is zero
    jmp t2_t3_break
t2_t3:
    out pins, 4         ; pins := pins_t2_t3
t2_t3_loop:
    jmp x!=y t2_t3_continue
    jmp t2_t3_break
t2_t3_continue:
    jmp y--, t2_t3_loop  [loop_delay]
t2_t3_break:
    set x, 0            ; x := t4
    jmp x!=y t4
    ; XXX: maybe discard isn't needed now since we manually pull
    out null, 4         ; discard pins_t4 if t4 duration is zero
    jmp t4_break
t4:
    out pins, 4         ; pins := pins_t4
t4_loop:
    jmp y--, t4_loop     [loop_delay+1]
t4_break:
    ; restore saved command for next "pull noblock"
    mov x, isr
.wrap