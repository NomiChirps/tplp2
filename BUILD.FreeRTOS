# Yeah this is a bunch of cobbled-together nonsense.
# Hardcoded to use the RP2040 port.
#
# Required flags in .bazelrc:
#     build --@rules_pico//pico/config:rtos_adapter_enable=True
#     build --@rules_pico//pico/config:rtos_adapter_header=@FreeRTOS//:freertos_sdk_config
#     build --@rules_pico//pico/config:rtos_adapter_header_name=FreeRTOS/freertos_sdk_config.h
# Alternatively, use pico_build_with_config() to supply these parameters to your binary instead.
#
# TODO: watch https://github.com/bazelbuild/bazel/issues/14950. when that's sorted out,
#       break the dependency cycles using implementation_deps and reorganize this entire thing.

load("@//:defs.bzl", "join_lists")

package(default_visibility = ["//visibility:private"])

INCLUDE_DIRS = [
    "include",
    "portable/ThirdParty/GCC/RP2040/include",
]

HEADERS = join_lists([[i.replace(d, "FreeRTOS", 1) for i in glob([d + "/*.h"])] for d in INCLUDE_DIRS])

# i.e., in addition to "."
EXTRA_SOURCE_DIRS = [
    "portable/ThirdParty/GCC/RP2040",
]

# heap_1 does not permit deletion
# heap_2 permits deletion but does not coalesce
# heap_3 wraps malloc/free (avoid)
# heap_4 coalesces
HEAP_IMPL = "heap_4.c"

SOURCES = join_lists([[i.replace(d, "FreeRTOS", 1) for i in glob([d + "/*.c"])] for d in EXTRA_SOURCE_DIRS]) + ["FreeRTOS/" + s for s in glob(["*.c"]) + [HEAP_IMPL]]

# There are some gnarly dependency cycles in FreeRTOS, and no include-prefix discipline. To cope with this we simply dump everything into a directory named "FreeRTOS" and compile it all together at once.
genrule(
    name = "_construct_source_tree",
    srcs = glob([d + "/*.h" for d in INCLUDE_DIRS] + [d + "/*.c" for d in EXTRA_SOURCE_DIRS] + ["*.c"]) + ["portable/MemMang/" + HEAP_IMPL],
    outs = HEADERS + SOURCES,
    cmd_bash = "mkdir -p $(RULEDIR)/FreeRTOS; cp $(SRCS) $(RULEDIR)/FreeRTOS",
    cmd_ps = "New-Item -Path $(RULEDIR) -Name FreeRTOS -ItemType directory -Force | Out-Null; Copy-Item -Path \"$(SRCS)\".Split() -Destination $(RULEDIR)/FreeRTOS/",
)

cc_library(
    name = "FreeRTOS-headers",
    hdrs = HEADERS,
    deps = [":FreeRTOSConfig"],
)

cc_library(
    name = "FreeRTOS",
    srcs = SOURCES,
    hdrs = ["FreeRTOS/FreeRTOS.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":FreeRTOS-headers",
        "@rules_pico//pico:hardware_clocks",
        "@rules_pico//pico:hardware_exception",
        "@rules_pico//pico:hardware_irq",
        "@rules_pico//pico:pico_multicore",
        "@rules_pico//pico:pico_stdlib",
        "@rules_pico//pico:pico_sync",
    ],
    # Needed for when @rules_pico depends on :freertos_sdk_config.
    alwayslink = 1,
)

cc_library(
    name = "freertos_sdk_config",
    hdrs = ["FreeRTOS/freertos_sdk_config.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":FreeRTOSConfig",
        ":rp2040_config",
    ],
)

cc_library(
    name = "port_impl",
    # Source files from the RP2040 port that were copied by _construct_source_tree
    srcs = [
        "FreeRTOS/idle_task_static_memory.c",
        "FreeRTOS/port.c",
    ],
    deps = [
        ":FreeRTOS",
        "@rules_pico//pico:pico_stdlib",
    ],
    # Needed for when @rules_pico depends on :freertos_sdk_config.
    alwayslink = 1,
)

cc_library(
    # Should be included at the end of user FreeRTOSConfig.h
    name = "rp2040_config",
    hdrs = ["FreeRTOS/rp2040_config.h"],
    visibility = ["//visibility:public"],
)

label_flag(
    name = "FreeRTOSConfig",
    build_setting_default = "@//:FreeRTOSConfig.h",
)
